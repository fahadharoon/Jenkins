#Batch Script Section

@echo off
setlocal enabledelayedexpansion

set BASE_PATH_=BASE_PATH_
set label=%label%
set concatenatedVariableName=!BASE_PATH_!!label!
setx CONCATENATED_VALUE "!%concatenatedVariableName%!" /M

endlocal

#################################################################################

# Retrieve the concatenated value from the environment variable
$BASE_PATHS = [Environment]::GetEnvironmentVariable("CONCATENATED_VALUE", "Machine")

# Check if the value is not null or empty
if (-not [string]::IsNullOrWhiteSpace($BASE_PATHS)) {
    # Split the value into an array using commas as the delimiter
    $BASE_PATHS = $BASE_PATHS -split ','

    # Trim whitespace from each element in the array and enclose in double quotes
    $BASE_PATHS = $BASE_PATHS | ForEach-Object { "`"$_`"" }

    # Join the elements into a single string with ', ' as the separator
    $formattedString = $BASE_PATHS -join ', '

    Write-Host "The concatenated value for ${env:label} is: $formattedString"
    
  
  Write-Host "$formattedString"

    # Save the formatted string into a variable
    $formattedStringVariable = $formattedString
} else {
    Write-Host "The concatenated value for ${env:label} is null or empty."
    $formattedStringVariable = $null
}

# Use $formattedStringVariable as needed in the rest of your script



# Define an array of executable file names
$executableFileNames = @(
    "OrderExecServer.exe",
    "FIXHub.exe",
  	"FIXEngine.exe",
    "Apache.Ignite.Executable.exe*",
    "QueryServer.exe",
    "DataAccessServer.exe",
  	"ACT Reporting Server.exe",
    "OMSConfiguratorServiceHost.exe"
)

# Get all services with their executable paths
$servicesWithPaths = Get-WmiObject Win32_Service | Select-Object DisplayName, Description, State, PathName, StartMode

# Filter services based on executable paths
$filteredServices = $servicesWithPaths | Where-Object {
    $path = $_.PathName.Trim('"') # Remove leading and trailing quotes for comparison
    foreach ($executableFileName in $executableFileNames) {
        if ($path -like "*\$executableFileName") {
            return $true
        }
    }
    return $false
}

$filteredServices | ForEach-Object {
    if ($_.State -eq "Stopped" -and $_.StartMode -eq "Disabled") {
        $_.State = "Disabled"
    }
    if ($_.State -eq "StopPending") {
        $_.State = "Stopping"
    }
    $_
} | Select-Object DisplayName, Description, State

# Names to exclude from the output
$namesToExclude = @($formattedString)

# Exclude specific rows based on names

# Names to exclude from the output
$namesToExclude = $formattedString

# Exclude specific rows based on names

#$filteredServices = $filteredServices | Where-Object { $formattedString -notlike "*$($_.DisplayName)*" }

#$filteredServices = $filteredServices | Where-Object { ($formattedString -notlike "*$($_.DisplayName)*") -and ($_.DisplayName -ne "UpdateServer_CorpAct") -and ($_.DisplayName -ne "UpdateServerCORPACT") -and ($_.DisplayName -ne "OMSServer64") -and ($_.DisplayName -ne "OMSServer64-BANFF") -and ($_.DisplayName -ne "OMSServer64-ONT") -and ($_.DisplayName -ne "FIXVC14-APP01") -and ($_.DisplayName -ne "FIXVC14-Outbound01") -and ($_.DisplayName -ne "LocateServer-Frankfurt") -and ($_.DisplayName -ne "vTraderEngineVC17-NEW")}

#$filteredServices = $filteredServices | Where-Object { 
#    ($formattedString -notlike "$($_.Description)") -and 
#    ($excludeDisplayNames -notcontains $_.DisplayName)
#}

Write-Host "Formatted String: $($formattedString)"



$formattedString | Out-File -FilePath "${env:label}.txt"
# Read the content of the file into an array
$lines = Get-Content -Path "${env:label}.txt"

# Remove double quotes from each line
$linesWithoutQuotes = $lines -replace '"'

# Write the modified content back to the file
$linesWithoutQuotes | Out-File -FilePath "${env:label}.txt" -Force




# Read the content of the file into the variable $namesToExclude
$namesToExclude = Get-Content -Path "${env:label}.txt"

# Output the content of the variable
Write-Host "Content of \$namesToExclude variable:"
Write-Host $namesToExclude

# Split the string of names to exclude into an array
$namesToExclude = "$namesToExclude" -split ', '



# Filter $filteredServices based on $namesToExclude
#$filteredServices = $filteredServices | Where-Object { $namesToExclude -notcontains $_.DisplayName }


# Filter services based on excluded names and remove disabled services
#$filteredServices = $filteredServices | Where-Object { $_.DisplayName -notin $namesToExclude -and $_.StartMode -ne "Disabled" }
#$filteredServices = $filteredServices | Where-Object { $_.DisplayName -notin $formattedString }

#$filteredServices = $filteredServices | Where-Object { $_.DisplayName -notin $namesToExclude}

#$filteredServices = $filteredServices | Where-Object { $_.DisplayName -notin "$namesToExclude"}  | Out-File -FilePath "output.txt"

# Split the variable $namesToExclude into an array of values
$namesToExcludeArray = $namesToExclude -split ','

# Iterate over each value in $namesToExcludeArray and filter $filteredServices
foreach ($name in $namesToExcludeArray) {
  Write-Host "$name"
    $filteredServices = $filteredServices | Where-Object { $_.DisplayName -ne $name }
}

# Output the filtered services to a text file
$filteredServices | Out-File -FilePath "output.txt"




#$filteredServices = $filteredServices | Where-Object { 
#    ($formattedString -notlike "*$($_.DisplayName)*") -and 
#    ($excludeDisplayNames -notcontains $_.DisplayName)
#}










# HTML header
$htmlHeader = @"
<!DOCTYPE html>
<html>
<head>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
        }

        .flex-container {
            display: inline;
            justify-content: left;
            align-items: center;
            height: 100vh;
        }

        .mainBox {
            width: 100%;
            background: #ffffff;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        .mainheading {
            text-align: center;
            font-size: 18px;
            font-weight: 700;
            color: #333333;
            padding: 2px 0;
            border-bottom: 2px solid #6096BA;
        }

        .whitebox {
            padding: 1px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 0px;
        }

        th, td {
            border: 1px solid #dddddd;
            text-align: center;
            padding: 2px;
            font-size: 14px;
        }

        th {
            background-color: #f2f2f2;
            color: #333333;
            font-weight: 700;
            letter-spacing: 1px;
        }

        tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        tr:hover {
            background-color: #e6e6e6;
        }

        .footer {
            text-align: center;
            font-size: 18px;
            font-weight: 700;
            color: #333333;
            padding: 2px 0;
            border-top: 2px solid #6096BA;
        }
    </style>
</head>
<body>
  <div class="flexdiv">
  	<div class = "mainBox">
	<h2 class= "mainheading">${env:label} (Service Status Report)<hr></h2>
	<div class = "whitebox">
    <table class = "tableEquity">
         <tr>
            <th style="background-color:#EEEEEE; color:Black; width:10%; height:20px">Environment</th>
            <th style="background-color:#EEEEEE; color:Black; width:10%; height:20px">Display Name</th>
            <th style="background-color:#EEEEEE; color:Black; width:10%; height:20px">Description</th>
			<th style="background-color:#EEEEEE; color:Black; width:10%; height:20px">Status</th>
    	</tr>
"@

# HTML footer
$htmlFooter = @"
    </table>
</div>
    </div>
</div>

</body>
</html>
"@

# Generate HTML content for each service with color coding
$htmlServices = $filteredServices | ForEach-Object {
    $displayName = $_.DisplayName
    $description = $_.Description
    $status = $_.State

    # Check for null or empty description
    if ([string]::IsNullOrWhiteSpace($description)) {
        $description = "N/A"
    }

    # Determine the class for styling based on the service status
    $statusClass = if ($status -eq 'Running') { 'green' } elseif ($status -eq 'Disabled') { 'grey' } else { 'red' }


    "<tr><td><b>${env:label}</b></td><td>$displayName</td><td>$description</td><td class='$statusClass'>$status</td></tr>"
  

}

# Combine HTML header, service content, and footer
$htmlContent = $htmlHeader + ($htmlServices -join "`n") + $htmlFooter

# Save the HTML content to a file
$htmlContent | Out-File -FilePath "${env:label}.html" -Encoding UTF8


Write-Host "HTML report created: ${env:label}.html"
